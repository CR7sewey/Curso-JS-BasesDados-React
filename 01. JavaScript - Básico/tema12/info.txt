// Arrays - Básico

Imaginem que queremos uma lista de algo?
Por exemplo temos a lista de alunos da turma A 
Podemos armazenar num array
const alunos = ['Miguel', 'Ronaldo', 'Maria'];
const arrayMaluco = [1, "Miguel", true, 2.3, null, undefined];

O ideal será meter só um tipo de dados no array.

Os arrays são indexados (semelhante a string)
                    0          1         2
const alunos2 = ["Miguel", "Ronaldo", "Maria"];
console.log(alunos2[0], alunos2[0][0]);

// Alguns métodos de array
const alunos3 = ["Miguel", "Ronaldo", "Maria"];

alunos3.push("Ricardo"); // adiciona "Ricardo" ao final da lista
console.log(alunos3);

console.log(alunos3.includes("Ricardo")); // true -> vai ver se "Ricardo" está na lista

alunos3.unshift("Bruno"); // adiciona "Bruno" ao inicio da lista
console.log(alunos3);

alunos3[0] = "Jose"; // altera o indice 0 da lista
console.log(alunos3);

const removido = alunos3.pop(); // remove o ultimo elemento da lista
console.log(alunos3);

alunos3.shift(); // remove o primeiro elemento da lista
console.log(alunos3);

delete alunos3[0]; // não reajusta o array, fica com o empty item
console.log(alunos3);

console.log(alunos3[10]); // dá undefined -  nao existe na memoria

console.log(alunos3.slice(0, 2)); // fatia array do indice 0 ao 2 (exclusive)
console.log(alunos3.slice(0, -1)); // fatia array do indice 0 ao -1 (exclusive)

console.log(alunos3 instanceof Array); // validar se é do tipo Array
const arrayComArray = new Array();
arrayComArray.push(1);
arrayComArray.push(2);
console.log(arrayComArray, "Sou um Array");

// Const vs Let em arrays

Const com valores mutáveis
const descreve uma variável que não pode ser reatribuída (com o operador de atribuição =). 
Depois de criá-la, não podemos fazer algo assim:

const nome = 'luiz';
nome = 'joão'; // Erro: Assignment to constant variable.
Porém, existe uma diferença entre variável e valor.

Variáveis são como um apelido para um valor, uma espécie de alias para mencionar algum valor salvo na memória.

Já valores são os dados que realmente ficam salvos na memória e sustentam determinado tipo. 
Alguns tipos de valores são imutáveis, como number, string, boolean, undefined, null, symbol e bigint (os primitivos todos são imutáveis). 
Outros tipos são mutáveis, como arrays e objetos (objetos em geral são mutáveis, com exceção de null).

Valores mutáveis geralmente são estruturas de dados mais complexas que sustentam outros valores ou comportamentos internamente. 
Como é o caso do array, que pode ser composto por vários outros tipos de dados.

Quando usamos const com tipos primitivos, esse valor nunca mais poderá ser alterado. 
Nesse caso, além de const não permitir reatribuição, o valor também é imutável (consequentemente, nunca podemos alterar essa constante).

Já quando usamos const com valores mutáveis (como arrays e objetos), a variável continua sendo constante, porém os valores dentro do objeto poderão ser alterados. 
Isso acontece porque quando alteramos um valor interno de um objeto, não ocorre a reatribuição da variável com sinal de atribuição = (a variável continua apontando para o mesmo local na memória), apenas a alteração de um valor interno do mesmo objeto.

Por este motivo, pode-se usar const com objetos mutáveis e ainda assim alterar seus valores internos. A única coisa que não vamos conseguir fazer é reatribuir o valor da variável.

Exemplos:

Isso pode

const array = [1, 2, 3, 4, 5];
array.pop();
array[0] = 1024;
console.log(array); // [ 1024, 2, 3, 4 ]
 
Isso NÃO pode

const array = [1, 2, 3, 4, 5];
array = 'Legal'; // Assignment to constant variable.

